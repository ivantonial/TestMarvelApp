name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'
      - 'release/**'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  XCODE_VERSION: '15.0'
  IOS_DESTINATION: 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.0'
  SCHEME: 'MarvelApp'
  PROJECT: 'MarvelApp.xcodeproj'
  DERIVED_DATA_PATH: 'DerivedData'

jobs:
  # Job 1: Lint e Análise de Código
  lint:
    name: SwiftLint
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install SwiftLint
        run: brew install swiftlint
        
      - name: Run SwiftLint
        run: |
          swiftlint --config .swiftlint.yml --reporter json > swiftlint-report.json || true
          swiftlint --config .swiftlint.yml
        continue-on-error: true
        
      - name: Upload SwiftLint Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: swiftlint-report
          path: swiftlint-report.json

  # Job 2: Build e Testes Unitários
  build-and-test:
    name: Build and Test
    runs-on: macos-14
    needs: lint
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Cache SPM packages
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Cache DerivedData
        uses: actions/cache@v3
        with:
          path: ${{ env.DERIVED_DATA_PATH }}
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-
      
      - name: Setup Ruby for Fastlane (optional)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
        continue-on-error: true
      
      - name: Install Dependencies
        run: |
          # Se usar CocoaPods (adicionar se necessário)
          # pod install
          
          # Resolve Swift Package Manager dependencies
          xcodebuild -resolvePackageDependencies \
            -project "${{ env.PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -derivedDataPath "${{ env.DERIVED_DATA_PATH }}"
      
      - name: Setup Marvel API Keys
        run: |
          # Criar arquivo xcconfig com as chaves da API
          echo "MARVEL_PUBLIC_KEY = ${{ secrets.MARVEL_PUBLIC_KEY }}" > Config.xcconfig
          echo "MARVEL_PRIVATE_KEY = ${{ secrets.MARVEL_PRIVATE_KEY }}" >> Config.xcconfig
          
          # Alternativa: Configurar diretamente no Info.plist via PlistBuddy
          /usr/libexec/PlistBuddy -c "Set :MARVEL_PUBLIC_KEY ${{ secrets.MARVEL_PUBLIC_KEY }}" MarvelApp/Info.plist
          /usr/libexec/PlistBuddy -c "Set :MARVEL_PRIVATE_KEY ${{ secrets.MARVEL_PRIVATE_KEY }}" MarvelApp/Info.plist
      
      - name: Build for Testing
        run: |
          set -o pipefail
          xcodebuild build-for-testing \
            -project "${{ env.PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration ${{ matrix.configuration }} \
            -destination "${{ env.IOS_DESTINATION }}" \
            -derivedDataPath "${{ env.DERIVED_DATA_PATH }}" \
            -enableCodeCoverage YES \
            ONLY_ACTIVE_ARCH=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO | xcpretty --color
      
      - name: Run Unit Tests
        run: |
          set -o pipefail
          xcodebuild test-without-building \
            -project "${{ env.PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration ${{ matrix.configuration }} \
            -destination "${{ env.IOS_DESTINATION }}" \
            -derivedDataPath "${{ env.DERIVED_DATA_PATH }}" \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult | xcpretty --color --test
      
      - name: Run Swift Testing Framework Tests
        run: |
          # Rodar testes do novo Swift Testing framework
          swift test --parallel --xunit-output swift-test-results.xml
        continue-on-error: true
      
      - name: Generate Code Coverage Report
        if: matrix.configuration == 'Debug'
        run: |
          # Instalar xcov se não estiver instalado
          gem install xcov || true
          
          # Gerar relatório de cobertura
          xcov --project "${{ env.PROJECT }}" \
               --scheme "${{ env.SCHEME }}" \
               --output_directory coverage_report \
               --derived_data_path "${{ env.DERIVED_DATA_PATH }}" || true
          
          # Alternativa usando xccov
          xcrun xccov view --report --json TestResults.xcresult > coverage.json || true
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.configuration }}
          path: |
            TestResults.xcresult
            swift-test-results.xml
      
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        if: matrix.configuration == 'Debug' && always()
        with:
          name: coverage-report
          path: |
            coverage_report/
            coverage.json
      
      - name: Report Coverage to Codecov
        if: matrix.configuration == 'Debug'
        uses: codecov/codecov-action@v3
        with:
          file: coverage.json
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Job 3: Testes de UI
  ui-tests:
    name: UI Tests
    runs-on: macos-14
    needs: build-and-test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Setup Marvel API Keys
        run: |
          /usr/libexec/PlistBuddy -c "Set :MARVEL_PUBLIC_KEY ${{ secrets.MARVEL_PUBLIC_KEY }}" MarvelApp/Info.plist
          /usr/libexec/PlistBuddy -c "Set :MARVEL_PRIVATE_KEY ${{ secrets.MARVEL_PRIVATE_KEY }}" MarvelApp/Info.plist
      
      - name: Boot Simulator
        run: |
          xcrun simctl boot "iPhone 15 Pro" || true
          xcrun simctl list
      
      - name: Run UI Tests
        run: |
          set -o pipefail
          xcodebuild test \
            -project "${{ env.PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -destination "${{ env.IOS_DESTINATION }}" \
            -only-testing:MarvelAppUITests \
            -derivedDataPath "${{ env.DERIVED_DATA_PATH }}" \
            -resultBundlePath UITestResults.xcresult | xcpretty --color --test
      
      - name: Upload UI Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ui-test-results
          path: UITestResults.xcresult
      
      - name: Upload UI Test Screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ui-test-screenshots
          path: |
            ${{ env.DERIVED_DATA_PATH }}/Logs/Test/**/*.png
            UITestResults.xcresult/Attachments/**/*.png

  # Job 4: Análise de Segurança
  security-scan:
    name: Security Scan
    runs-on: macos-14
    needs: lint
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run Dependency Check
        run: |
          # Verificar vulnerabilidades em dependências SPM
          swift package audit --target-all || true
        continue-on-error: true
      
      - name: Check for Hardcoded Secrets
        run: |
          # Instalar e rodar gitleaks
          brew install gitleaks
          gitleaks detect --source . --verbose --no-git || true
        continue-on-error: true

  # Job 5: Build de Produção (Release)
  build-release:
    name: Build Release
    runs-on: macos-14
    needs: [build-and-test, ui-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release/*')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Setup Marvel API Keys
        run: |
          /usr/libexec/PlistBuddy -c "Set :MARVEL_PUBLIC_KEY ${{ secrets.MARVEL_PUBLIC_KEY }}" MarvelApp/Info.plist
          /usr/libexec/PlistBuddy -c "Set :MARVEL_PRIVATE_KEY ${{ secrets.MARVEL_PRIVATE_KEY }}" MarvelApp/Info.plist
      
      - name: Setup Certificates and Provisioning Profiles
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Criar keychain temporário
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Importar certificado e provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Criar keychain temporário
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Importar certificado
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Aplicar provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        continue-on-error: true
      
      - name: Increment Build Number
        run: |
          # Incrementar build number baseado no número do run
          BUILD_NUMBER=${{ github.run_number }}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" MarvelApp/Info.plist
      
      - name: Build Archive
        run: |
          set -o pipefail
          xcodebuild archive \
            -project "${{ env.PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Release \
            -archivePath $RUNNER_TEMP/MarvelApp.xcarchive \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM=${{ secrets.DEVELOPMENT_TEAM }} | xcpretty --color
      
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/MarvelApp.xcarchive \
            -exportPath $RUNNER_TEMP/export \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates
        continue-on-error: true
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            $RUNNER_TEMP/MarvelApp.xcarchive
            $RUNNER_TEMP/export/*.ipa

  # Job 6: Deploy para TestFlight (Opcional)
  deploy-testflight:
    name: Deploy to TestFlight
    runs-on: macos-14
    needs: build-release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build
      
      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          # Criar arquivo de chave da API
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" > AuthKey.p8
          
          # Upload para TestFlight usando altool ou xcrun
          xcrun altool --upload-app \
            --type ios \
            --file build/*.ipa \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
        continue-on-error: true

  # Job 7: Notificação
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, ui-tests, security-scan]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Pipeline Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Branch: ${{ github.ref }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
      
      - name: Create Issue on Failure
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI/CD Pipeline Failed - Run #${context.runNumber}`,
              body: `The CI/CD pipeline failed on ${context.ref}.\n\nCommit: ${context.sha}\nAuthor: ${context.actor}\n\n[View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['ci-failure', 'automated']
            });
        continue-on-error: true