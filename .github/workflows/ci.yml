name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  SCHEME: 'MarvelApp'
  PROJECT_PATH: 'MarvelApp.xcodeproj'
  SECRETS_PATH: 'MarvelApp/Config'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-15         # ‚úÖ macOS 15 tem vers√µes mais recentes

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: List Available Xcode Versions
      run: |
        echo "üì± Available Xcode versions:"
        ls /Applications/ | grep Xcode

    - name: Select Latest Available Xcode
      run: |
        # Seleciona a vers√£o mais recente dispon√≠vel
        LATEST_XCODE=$(ls /Applications/ | grep "Xcode_" | sort -V | tail -1)
        if [ -z "$LATEST_XCODE" ]; then
          LATEST_XCODE="Xcode.app"
        fi
        echo "üì± Using: $LATEST_XCODE"
        sudo xcode-select -s /Applications/$LATEST_XCODE/Contents/Developer
        xcodebuild -version
        swift --version

    - name: Setup Secrets
      run: |
        cp ${{ env.SECRETS_PATH }}/Secrets-model.xcconfig ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PUBLIC_KEY_HERE/${{ secrets.MARVEL_PUBLIC_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PRIVATE_KEY_HERE/${{ secrets.MARVEL_PRIVATE_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig

    - name: Cache SPM Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Clean Build Folder
      run: |
        rm -rf ~/Library/Developer/Xcode/DerivedData
        rm -rf .build

    - name: Build and Test
      run: |
        # Detecta automaticamente um simulador dispon√≠vel
        SIMULATORS=$(xcrun simctl list devices available iPhone | grep -v "unavailable" | grep "iPhone" | head -1)
        DEVICE_NAME=$(echo "$SIMULATORS" | sed 's/.*(\(.*\)).*/\1/' | xargs)
        
        if [ -z "$DEVICE_NAME" ]; then
          echo "‚ùå No iPhone simulator found"
          exit 1
        fi
        
        echo "üì± Using simulator: $DEVICE_NAME"
        
        xcodebuild test \
          -project ${{ env.PROJECT_PATH }} \
          -scheme ${{ env.SCHEME }} \
          -destination "platform=iOS Simulator,id=$DEVICE_NAME" \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO