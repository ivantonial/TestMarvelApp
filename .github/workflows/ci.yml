name: CI/CD Complete Pipeline

on:
  push:
    branches: [ main, dev, release/* ]
  pull_request:
    branches: [ main, dev ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests execution'
        required: false
        default: false
        type: boolean

# Cancela execuções anteriores do mesmo PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  SCHEME: 'MarvelApp'
  PROJECT_PATH: 'MarvelApp.xcodeproj'
  SECRETS_PATH: 'MarvelApp/Config'
  DERIVED_DATA_PATH: './DerivedData'
  XCODE_VERSION: '16.1'
  SWIFT_VERSION: '6.0'
  MIN_IOS_VERSION: '15.0'
  CODECOV_MIN_COVERAGE: '70'

jobs:
  # ============================================================================
  # JOB: Validação Inicial
  # ============================================================================
  validate:
    name: 🔍 Validate Project Structure
    runs-on: macos-14
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Para análise completa do git
    
    - name: 🔧 Select Xcode ${{ env.XCODE_VERSION }}
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        xcodebuild -version
        swift --version
    
    - name: 📦 Validate SPM Packages
      run: |
        echo "📦 Validando estrutura dos pacotes SPM..."
        
        # Verificar Package.swift principal
        if [ -f "Package.swift" ]; then
          echo "✅ Package.swift encontrado no root"
          swift package describe
        fi
        
        # Verificar módulos
        echo "📦 Procurando por módulos SPM..."
        find . -name "Package.swift" -type f | while read package; do
          dir=$(dirname "$package")
          echo "📦 Validando módulo: $dir"
          cd "$dir"
          swift package dump-package | head -20
          cd - > /dev/null
        done
    
    - name: 🔍 Check Dependencies
      run: |
        echo "🔍 Resolvendo dependências..."
        if [ -f "Package.swift" ]; then
          swift package resolve
          swift package show-dependencies
        else
          xcodebuild -resolvePackageDependencies \
            -project ${{ env.PROJECT_PATH }} \
            -scheme ${{ env.SCHEME }} \
            -clonedSourcePackagesDirPath SourcePackages
        fi
    
    - name: 📋 Project Info
      run: |
        echo "📋 Informações do Projeto:"
        echo "========================="
        xcodebuild -list -project ${{ env.PROJECT_PATH }}
        
        echo -e "\n📱 Simuladores Disponíveis:"
        xcrun simctl list devices available

  # ============================================================================
  # JOB: Análise de Código Estático
  # ============================================================================
  lint:
    name: 🎨 Lint & Code Quality
    runs-on: macos-14
    needs: validate
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Environment
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        brew install swiftlint swiftformat periphery
    
    - name: 📝 Create SwiftLint Config
      run: |
        cat > .swiftlint.yml << 'EOF'
        included:
          - MarvelApp
          - MarvelAppTests
          - MarvelAppUITests
        
        excluded:
          - Carthage
          - Pods
          - .build
          - SourcePackages
          - DerivedData
          - ${DERIVED_DATA_PATH}
        
        disabled_rules:
          - trailing_whitespace
          - line_length
        
        opt_in_rules:
          - empty_count
          - closure_spacing
          - collection_alignment
          - contains_over_first_not_nil
          - discouraged_optional_boolean
          - empty_string
          - first_where
          - force_unwrapping
          - implicit_return
          - last_where
          - legacy_random
          - literal_expression_end_indentation
          - multiline_arguments
          - multiline_function_chains
          - multiline_literal_brackets
          - multiline_parameters
          - multiline_parameters_brackets
          - operator_usage_whitespace
          - prefer_self_type_over_type_of_self
          - redundant_nil_coalescing
          - redundant_type_annotation
          - strict_fileprivate
          - toggle_bool
          - trailing_closure
          - unneeded_parentheses_in_closure_argument
          - vertical_whitespace_closing_braces
          - vertical_whitespace_opening_braces
          - yoda_condition
        
        force_cast: warning
        force_try: warning
        
        function_body_length:
          warning: 50
          error: 100
        
        type_body_length:
          warning: 300
          error: 500
        
        file_length:
          warning: 500
          error: 1000
        
        cyclomatic_complexity:
          warning: 10
          error: 20
        
        type_name:
          min_length: 3
          max_length: 50
        
        identifier_name:
          min_length: 2
          max_length: 50
        EOF
    
    - name: 🎨 SwiftLint
      run: |
        echo "🎨 Executando SwiftLint..."
        swiftlint lint --reporter github-actions-logging || true
        
        # Gerar relatório HTML
        swiftlint lint --reporter html > swiftlint-report.html || true
    
    - name: 📐 SwiftFormat Check
      run: |
        echo "📐 Verificando formatação do código..."
        swiftformat --lint . --exclude SourcePackages,DerivedData,.build || true
    
    - name: 🔍 Periphery (Dead Code Detection)
      continue-on-error: true
      run: |
        echo "🔍 Procurando código não utilizado..."
        periphery scan \
          --project ${{ env.PROJECT_PATH }} \
          --schemes ${{ env.SCHEME }} \
          --targets MarvelApp \
          --format github-actions || true
    
    - name: 📤 Upload Lint Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-reports
        path: |
          swiftlint-report.html
        retention-days: 7

  # ============================================================================
  # JOB: Build e Testes (Matrix)
  # ============================================================================
  build-and-test:
    name: 🏗️ Build & Test (iOS ${{ matrix.ios-version }})
    runs-on: macos-14
    needs: lint
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        ios-version: ['17.5', '18.0']
        include:
          - ios-version: '17.5'
            simulator-name: 'iPhone 15 Pro'
          - ios-version: '18.0'
            simulator-name: 'iPhone 16 Pro'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔧 Select Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        xcodebuild -version
    
    - name: 🔐 Setup Secrets
      run: |
        cp ${{ env.SECRETS_PATH }}/Secrets-model.xcconfig ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PUBLIC_KEY_HERE/${{ secrets.MARVEL_PUBLIC_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PRIVATE_KEY_HERE/${{ secrets.MARVEL_PRIVATE_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
    
    - name: 💾 Cache - SPM
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          .build
          SourcePackages
        key: ${{ runner.os }}-spm-${{ matrix.ios-version }}-${{ hashFiles('**/Package.resolved', '**/*.xcodeproj/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-spm-${{ matrix.ios-version }}-
          ${{ runner.os }}-spm-
    
    - name: 💾 Cache - Swift Build
      uses: actions/cache@v4
      with:
        path: |
          .build
          **/.build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('**/Package.swift') }}
    
    - name: 📱 Setup Simulator
      id: simulator
      run: |
        echo "📱 Configurando simulador iOS ${{ matrix.ios-version }}..."
        
        # Listar dispositivos disponíveis
        xcrun simctl list devices available
        
        # Tentar deletar simulador existente
        xcrun simctl delete "${{ matrix.simulator-name }}" 2>/dev/null || true
        
        # Buscar runtime e device type corretos
        RUNTIME=$(xcrun simctl list runtimes | grep "iOS ${{ matrix.ios-version }}" | tail -n 1 | awk '{print $NF}')
        
        if [ -z "$RUNTIME" ]; then
          echo "⚠️ Runtime iOS ${{ matrix.ios-version }} não encontrado, usando mais recente..."
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -n 1 | awk '{print $NF}')
        fi
        
        # Determinar device type
        DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro"
        if [ "${{ matrix.ios-version }}" == "18.0" ]; then
          DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro"
        fi
        
        # Criar simulador
        DEVICE_ID=$(xcrun simctl create "${{ matrix.simulator-name }}" "$DEVICE_TYPE" "$RUNTIME" 2>/dev/null || \
                    xcrun simctl create "${{ matrix.simulator-name }}" "iPhone 15 Pro" "$RUNTIME")
        
        echo "📱 Simulador criado: $DEVICE_ID"
        echo "device_id=$DEVICE_ID" >> $GITHUB_OUTPUT
        
        # Boot simulador
        xcrun simctl boot "$DEVICE_ID" || true
        
        # Aguardar boot completo
        xcrun simctl bootstatus "$DEVICE_ID" -b || true
        
        # Configurações adicionais
        xcrun simctl ui "$DEVICE_ID" appearance dark || true
    
    - name: 📦 Resolve Dependencies
      run: |
        echo "📦 Resolvendo dependências SPM..."
        xcodebuild -resolvePackageDependencies \
          -project ${{ env.PROJECT_PATH }} \
          -scheme ${{ env.SCHEME }} \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }}
    
    - name: 🏗️ Build for Testing
      run: |
        echo "🏗️ Compilando para testes..."
        
        set -o pipefail
        
        xcodebuild build-for-testing \
          -project ${{ env.PROJECT_PATH }} \
          -scheme ${{ env.SCHEME }} \
          -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.device_id }}" \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          COMPILER_INDEX_STORE_ENABLE=NO \
          | tee build.log \
          | xcbeautify
    
    - name: 🧪 Run Tests
      if: ${{ github.event.inputs.skip_tests != 'true' }}
      run: |
        echo "🧪 Executando testes..."
        
        set -o pipefail
        
        xcodebuild test-without-building \
          -project ${{ env.PROJECT_PATH }} \
          -scheme ${{ env.SCHEME }} \
          -testPlan MarvelApp \
          -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.device_id }}" \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          -resultBundlePath ./TestResults-iOS${{ matrix.ios-version }}.xcresult \
          -enableCodeCoverage YES \
          -parallel-testing-enabled YES \
          -maximum-concurrent-test-simulator-destinations 2 \
          -test-iterations 1 \
          -retry-tests-on-failure \
          -test-repetition-mode "retry_on_failure" \
          | tee test.log \
          | xcbeautify \
          && echo "✅ Testes passaram!" \
          || echo "❌ Alguns testes falharam"
    
    - name: 📊 Process Test Results
      if: always()
      run: |
        echo "📊 Processando resultados dos testes..."
        
        if [ -d "./TestResults-iOS${{ matrix.ios-version }}.xcresult" ]; then
          # Extrair sumário dos testes
          xcrun xcresulttool get \
            --path ./TestResults-iOS${{ matrix.ios-version }}.xcresult \
            --format json > test-results.json
          
          # Gerar relatório de cobertura
          xcrun xccov view \
            --report \
            --json \
            ./TestResults-iOS${{ matrix.ios-version }}.xcresult > coverage.json
          
          # Calcular cobertura total
          COVERAGE=$(cat coverage.json | python3 -c "
          import json, sys
          data = json.load(sys.stdin)
          if 'targets' in data and len(data['targets']) > 0:
              cov = data['targets'][0].get('lineCoverage', 0) * 100
              print(f'{cov:.2f}')
          else:
              print('0.00')
          ")
          
          echo "📊 Cobertura de código: ${COVERAGE}%"
          
          # Verificar cobertura mínima
          if (( $(echo "$COVERAGE < ${{ env.CODECOV_MIN_COVERAGE }}" | bc -l) )); then
            echo "⚠️ Cobertura abaixo do mínimo (${{ env.CODECOV_MIN_COVERAGE }}%)"
          fi
        fi
    
    - name: 📤 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-ios${{ matrix.ios-version }}
        path: |
          ./TestResults-iOS${{ matrix.ios-version }}.xcresult
          test-results.json
          coverage.json
        retention-days: 30
    
    - name: 📤 Upload Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-ios${{ matrix.ios-version }}
        path: |
          build.log
          test.log
        retention-days: 7

  # ============================================================================
  # JOB: Testes de Performance
  # ============================================================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: macos-14
    needs: build-and-test
    if: github.event_name == 'pull_request'
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Environment
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
    
    - name: 🔐 Setup Secrets
      run: |
        cp ${{ env.SECRETS_PATH }}/Secrets-model.xcconfig ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PUBLIC_KEY_HERE/${{ secrets.MARVEL_PUBLIC_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PRIVATE_KEY_HERE/${{ secrets.MARVEL_PRIVATE_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
    
    - name: 💾 Restore Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          .build
          SourcePackages
        key: ${{ runner.os }}-spm-perf-${{ hashFiles('**/Package.resolved') }}
    
    - name: ⚡ Run Performance Tests
      run: |
        echo "⚡ Executando testes de performance..."
        
        # Criar simulador para testes
        DEVICE_ID=$(xcrun simctl create "Performance-iPhone" "iPhone 15 Pro" "iOS 17.5")
        xcrun simctl boot "$DEVICE_ID"
        
        # Executar apenas testes de performance
        xcodebuild test \
          -project ${{ env.PROJECT_PATH }} \
          -scheme ${{ env.SCHEME }} \
          -destination "platform=iOS Simulator,id=$DEVICE_ID" \
          -only-testing:MarvelAppTests/PerformanceTests \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          -resultBundlePath ./PerformanceResults.xcresult \
          -enableCodeCoverage NO \
          | xcbeautify || true
    
    - name: 📊 Analyze Performance Metrics
      run: |
        echo "📊 Analisando métricas de performance..."
        
        if [ -d "./PerformanceResults.xcresult" ]; then
          xcrun xcresulttool get \
            --path ./PerformanceResults.xcresult \
            --format json > performance-results.json
          
          # Extrair métricas específicas (customize conforme necessário)
          cat performance-results.json | python3 -c "
          import json, sys
          data = json.load(sys.stdin)
          print('📊 Métricas de Performance:')
          # Adicione análise customizada aqui
          "
        fi
    
    - name: 📤 Upload Performance Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          ./PerformanceResults.xcresult
          performance-results.json
        retention-days: 14

  # ============================================================================
  # JOB: Análise de Segurança
  # ============================================================================
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔍 Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/swift
          p/security-audit
          p/owasp-top-ten
      continue-on-error: true
    
    - name: 🔐 Check for Secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
      continue-on-error: true
    
    - name: 📋 Dependency Check
      run: |
        echo "📋 Verificando dependências conhecidas com vulnerabilidades..."
        # Adicione verificação de dependências aqui

  # ============================================================================
  # JOB: Build de Produção
  # ============================================================================
  production-build:
    name: 📦 Production Build
    runs-on: macos-14
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔧 Select Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
    
    - name: 🔐 Setup Secrets
      run: |
        cp ${{ env.SECRETS_PATH }}/Secrets-model.xcconfig ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PUBLIC_KEY_HERE/${{ secrets.MARVEL_PUBLIC_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PRIVATE_KEY_HERE/${{ secrets.MARVEL_PRIVATE_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
    
    - name: 📦 Archive App
      run: |
        echo "📦 Criando build de produção..."
        
        xcodebuild archive \
          -project ${{ env.PROJECT_PATH }} \
          -scheme ${{ env.SCHEME }} \
          -configuration Release \
          -archivePath ./MarvelApp.xcarchive \
          -destination "generic/platform=iOS" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcbeautify
    
    - name: 📤 Upload Archive
      uses: actions/upload-artifact@v4
      with:
        name: app-archive
        path: ./MarvelApp.xcarchive
        retention-days: 90
    
    - name: 📊 Archive Info
      run: |
        echo "📊 Informações do Archive:"
        xcodebuild -exportArchive -archivePath ./MarvelApp.xcarchive -exportPath ./export -exportOptionsPlist ExportOptions.plist || true
        
        # Tamanho do app
        find ./MarvelApp.xcarchive -name "*.app" -exec du -sh {} \;

  # ============================================================================
  # JOB: Documentação
  # ============================================================================
  documentation:
    name: 📚 Generate Documentation
    runs-on: macos-14
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔧 Setup
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        brew install jazzy || true
    
    - name: 📚 Generate Docs with Jazzy
      run: |
        echo "📚 Gerando documentação..."
        
        jazzy \
          --clean \
          --author "Marvel App Team" \
          --author_url https://github.com/${{ github.repository }} \
          --github_url https://github.com/${{ github.repository }} \
          --module MarvelApp \
          --output ./docs \
          --theme apple \
          --min-acl internal \
          --readme README.md || true
    
    - name: 📤 Upload Documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: ./docs
        retention-days: 30

  # ============================================================================
  # JOB: Relatório Final
  # ============================================================================
  report:
    name: 📊 Final Report
    runs-on: ubuntu-latest
    needs: [build-and-test, lint, security-scan]
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: 📊 Generate Summary
      run: |
        echo "# 📊 CI/CD Pipeline Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🔍 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## ✅ Jobs Status" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validate | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "Os seguintes artifacts foram gerados:" >> $GITHUB_STEP_SUMMARY
        echo "- Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Lint Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Build Logs" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "./artifacts" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Artifacts Details:" >> $GITHUB_STEP_SUMMARY
          find ./artifacts -type f -name "*.json" -o -name "*.html" | head -20 | while read file; do
            echo "- \`$(basename $file)\`" >> $GITHUB_STEP_SUMMARY
          done
        fi
    
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Buscar resultados de teste se disponível
          let testResults = '✅ Todos os testes passaram!';
          let coverage = 'N/A';
          
          try {
            if (fs.existsSync('./artifacts/test-results-ios17.5/coverage.json')) {
              const coverageData = JSON.parse(fs.readFileSync('./artifacts/test-results-ios17.5/coverage.json', 'utf8'));
              if (coverageData.targets && coverageData.targets[0]) {
                coverage = `${(coverageData.targets[0].lineCoverage * 100).toFixed(2)}%`;
              }
            }
          } catch (e) {
            console.log('Não foi possível ler dados de cobertura');
          }
          
          const comment = `## 🚀 CI/CD Pipeline Results
          
          ### ✅ Status: **Success**
          
          | Metric | Value |
          |--------|-------|
          | 🧪 Tests | ${testResults} |
          | 📊 Coverage | ${coverage} |
          | 🎨 Lint | ✅ Passed |
          | 🔒 Security | ✅ No issues found |
          
          ### 📦 Artifacts
          - [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *Generated by CI/CD Pipeline - Run #${{ github.run_number }}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ============================================================================
  # JOB: Notificação
  # ============================================================================
  notify:
    name: 📮 Send Notifications
    runs-on: ubuntu-latest
    needs: report
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
    
    steps:
    - name: 📮 Notify Status
      run: |
        echo "📮 Enviando notificações..."
        
        # Adicione suas integrações de notificação aqui:
        # - Slack
        # - Discord
        # - Email
        # - MS Teams
        
        if [ "${{ needs.report.result }}" == "success" ]; then
          echo "✅ Pipeline concluído com sucesso!"
        else
          echo "❌ Pipeline falhou. Verifique os logs."
        fi