name: CI
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  SCHEME: 'MarvelApp'
  PROJECT_PATH: 'MarvelApp.xcodeproj'
  SECRETS_PATH: 'MarvelApp/Config'
  SIMULATOR_NAME: 'iPhone 15 Pro'
  IOS_VERSION: '17.5'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Select Xcode 16.1
      run: |
        sudo xcode-select -s /Applications/Xcode_16.1.app
        xcodebuild -version
    
    - name: Fix Swift Tools Version
      run: |
        find . -name "Package.swift" -type f -exec sed -i '' -E 's/(swift-tools-version:[ ]*)6\.[2-9]/\16.0/g' {} \;
    
    - name: Setup Secrets
      run: |
        cp ${{ env.SECRETS_PATH }}/Secrets-model.xcconfig ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PUBLIC_KEY_HERE/${{ secrets.MARVEL_PUBLIC_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
        sed -i '' 's/YOUR_PRIVATE_KEY_HERE/${{ secrets.MARVEL_PRIVATE_KEY }}/' ${{ env.SECRETS_PATH }}/Secrets.xcconfig
    
    - name: Cache SPM Dependencies
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
    
    # NOVO: Configurar simulador iOS
    - name: Setup iOS Simulator
      run: |
        echo "üì± Listando runtimes dispon√≠veis..."
        xcrun simctl list runtimes
        
        echo "üì± Listando dispositivos dispon√≠veis..."
        xcrun simctl list devices available
        
        echo "üì± Instalando runtime iOS se necess√°rio..."
        # Tentar instalar o runtime (pode j√° estar instalado)
        sudo xcrun simctl runtime add "iOS ${{ env.IOS_VERSION }}" || true
        
        echo "üì± Criando simulador ${{ env.SIMULATOR_NAME }}..."
        # Deletar simulador existente se houver
        xcrun simctl delete "${{ env.SIMULATOR_NAME }}" 2>/dev/null || true
        
        # Criar novo simulador
        DEVICE_TYPE=$(xcrun simctl list devicetypes | grep "iPhone 15 Pro" | head -n 1 | awk -F'"' '{print $2}')
        RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -n 1 | awk -F' ' '{print $NF}')
        
        if [ -z "$DEVICE_TYPE" ]; then
          echo "‚ö†Ô∏è iPhone 15 Pro n√£o encontrado, usando iPhone 15..."
          DEVICE_TYPE=$(xcrun simctl list devicetypes | grep "iPhone 15" | head -n 1 | awk -F'"' '{print $2}')
        fi
        
        if [ -z "$DEVICE_TYPE" ]; then
          echo "‚ö†Ô∏è iPhone 15 n√£o encontrado, usando iPhone 14 Pro..."
          DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-14-Pro"
        fi
        
        echo "üì± Criando dispositivo: $DEVICE_TYPE com runtime: $RUNTIME"
        DEVICE_ID=$(xcrun simctl create "${{ env.SIMULATOR_NAME }}" "$DEVICE_TYPE" "$RUNTIME")
        
        echo "üì± Iniciando simulador..."
        xcrun simctl boot "$DEVICE_ID" || true
        
        echo "üì± Simulador criado: $DEVICE_ID"
        echo "SIMULATOR_ID=$DEVICE_ID" >> $GITHUB_ENV
        
        # Aguardar simulador estar pronto
        xcrun simctl bootstatus "$DEVICE_ID" -b
    
    - name: Build and Test
      run: |
        echo "üèóÔ∏è Building and testing..."
        
        set -o pipefail
        
        # Usar o ID do simulador criado ou fallback para gen√©rico
        if [ -n "$SIMULATOR_ID" ]; then
          DESTINATION="platform=iOS Simulator,id=$SIMULATOR_ID"
        else
          DESTINATION="platform=iOS Simulator,name=iPhone 14 Pro"
        fi
        
        echo "üì± Usando destination: $DESTINATION"
        
        xcodebuild test \
          -project ${{ env.PROJECT_PATH }} \
          -scheme ${{ env.SCHEME }} \
          -testPlan MarvelApp \
          -destination "$DESTINATION" \
          -enableCodeCoverage YES \
          -derivedDataPath ./DerivedData \
          -resultBundlePath ./TestResults.xcresult \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | tee xcodebuild.log \
          | xcpretty --color --report junit --output ./test-results.xml
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          ./TestResults.xcresult
          ./test-results.xml
        retention-days: 30
    
    - name: Upload Build Log
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: xcodebuild.log
        retention-days: 7
    
    - name: Success Message
      if: success()
      run: |
        echo "‚úÖ BUILD E TESTES PASSARAM COM SUCESSO!"
        echo "üìä Resultados dispon√≠veis nos artifacts"